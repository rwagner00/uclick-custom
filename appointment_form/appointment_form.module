<?php 

/*
 * The point of this module is to provide a block with an appointment form.
 * The block is intended to exist on property nodes, and only on property nodes,
 * though it's likely the functionality could be co-opted for other types.
 * Current functionality has the block sending an email to the author of the node
 * that the block exists on.
 * Block implements flag module system to determine whether or not an email 
 * has been sent by the current user in the last 24 hours.
 * The flags are purged nightly between 8PM and 12AM.
 * 
 * Requirements are in .info file.
 */

/**
 * Implements hook_block_info().
 */
function appointment_form_block_info() {
  $blocks['appointment_form'] = array(
    'info' => t('Appointment Form'), 
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function appointment_form_block_view($delta = '') {
  global $user;
  switch ($delta) {
    case 'appointment_form':
      $block['subject'] = t('Schedule an appointment.');
      if (!in_array('anonymous user', $user->roles)) {
        $block['content'] = drupal_get_form('appointment_form_form');
      }
      else {
        $block['content'] = 'foobar';        
      }
    break;
  }
  return $block;
}


/*
 * Builds the form for the appointment block.
 */
  
function appointment_form_form($form, &$form_state) {
  global $user;
  $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => '',
  	'#attributes' => array('class' => array('appointment_form_fields')),
  );
  if ($user->uid != 0) {
    $firstname = db_select('field_data_field_user_first_name', 'fn')
      ->fields('fn', array('field_user_first_name_value'))
      ->condition('entity_id', $user->uid)
      ->execute()
      ->fetchField();
    $lastname = db_select('field_data_field_user_last_name', 'ln')
      ->fields('ln', array('field_user_last_name_value'))
      ->condition('entity_id', $user->uid)
      ->execute()
      ->fetchField();     
  }
  else {
    $firstname = '';
    $lastname = '';
  }
 
  $format = 'm-d-Y H:i';
  $date = date('Y-m-d H:i:s');

  $form['fields']['first_name'] = array(
  	'#type' => 'textfield',
    '#title' => t('First Name'),
    '#required' => TRUE,
    '#attributes' => array('class' => array('first_name')),
    '#size' => 20,
  );
  isset($firstname) ? $form['fields']['first_name']['#default_value'] = $firstname : '' ;
  
  $form['fields']['last_name'] = array(
  	'#type' => 'textfield',
    '#title' => t('Last Name'),
    '#required' => TRUE,
    '#attributes' => array('class' => array('last_name')),
    '#size' => 20,
  );
  isset($lastname) ? $form['fields']['last_name']['#default_value'] = $lastname : '' ;
  
  $form['fields']['email_address'] = array(
  	'#type' => 'textfield',
    '#title' => t('Email Address'),
    '#default_value' => $user->mail,
    '#required' => TRUE,
    '#attributes' => array('class' => array('email_address')),
    '#size' => 20,  
  );
  
  $form['fields']['phone'] = array(
  	'#type' => 'textfield',
    '#title' => t('Phone Number'),
    '#description' => t('This number will not be stored or used for any purpose other than for the seller to contact you. '),
    '#required' => TRUE,
    '#attributes' => array('class' => array('phone_number')),
    '#size' => 20,
  ); 
    
  $form['fields']['date'] = array(
    '#type' => 'date_popup',
    '#title' => t('Date & Time'),
    '#description' => t('Date and time for appointment. Please note date and time on on seperate lines.'),
    '#date_format' => $format,
    '#date_label_position' => 'within',
    '#date_increment' => 5,
    '#date_year_range' => '-0:+1',
    '#date_month_range' => '-0:+1',
    '#attributes' => array('class' => array('date')),
    '#default_value' => $date, 
  );
 
  $form['fields']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Schedule Appointment',
  );
  
  return $form;
}

/*
 * Appointment form validation.
 */
function appointment_form_form_validate($form, &$form_state) {
  
  //make sure current user is logged in (in case form got rendered by an anon accidentally)
  global $user;
  if ($user->uid == 0) {
    form_set_error('fields', t('In order to reduce spam, you must be logged in to schedule an 
    	appointment, sorry!'));
  }
  
  //Get the NID of the current node. 
  //If the user has sent an email already today, prevent it from happening again.
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
  }
  $flag = flag_get_flag('email_sent') or die("No Email Sent flag defined");
  if ($flag->is_flagged($nid)) {
    form_set_error('fields', t('You\'ve already sent an email today'));
  }
  
  //Make sure all fields are filled in and the email address is actually an email.
  if (!isset($form_state['values']['first_name']) || !isset($form_state['values']['last_name'])) {
    form_set_error('first_name', t('You must provide your first and last name.'));
  }
  if (!isset($form_state['values']['email_address']) || 
      !valid_email_address($form_state['values']['email_address'])) {
    
    form_set_error('email_address', t('You must provide your email so that the seller can contact you.'));
  }
  if (!isset($form_state['values']['date'])) {
    form_set_error('date', t('Please input both a date and a time to meet the seller.'));
  }
  
  //Flag the node to prevent future emails.
  $flag->flag('flag', $nid);
}


/*
 * Implements submit for the appointment form.
 */
function appointment_form_form_submit($form, &$form_state) { 
  global $user;
  $module = 'appointment_form';
  $key = 'schedule_appointment';
  
  //Get nid of current node.
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
    $node = node_load($nid);
  }
  
  //get email address of receiving user
  $to = db_select('users', 'u')
    ->fields('u', array('mail'))
    ->condition('uid', $node->uid)
    ->execute()
    ->fetchField();

  //construct message
  $language = language_default();
  $params = $form_state;
  $from = (string)$user->mail;
  $send = TRUE;
  
  //send!
  drupal_mail($module, $key, $to, $language, $params, $from, $send);
}

/**
 * Implements hook_mail().
 * Constructs the message that is going to be sent.
 */
function appointment_form_mail($key, &$message, $params) {
  //extract more usable dates from param
  $date = date('M d, Y', strtotime($params['values']['date']));
  $time = date('g:i A', strtotime($params['values']['date']));
  
  //construct message body
  $message['subject'] = $params['values']['first_name'] . ' ' . $params['values']['last_name'] . ' would like to schedule an appointment.';
  $message['body'][] = $params['values']['first_name'] . ' is requesting to meet you or an agent at your home on ' . $date .
  	' at ' . $time . '. Please call them at ' . $params['values']['phone'] . ' or send them an email at ' . 
    $params['values']['email_address'] . ' to confirm this appointment or change the details.';
}

/**
 * Implements hook_cron().
 * Deletes all emailed already today flags.
 */
function appointment_form_cron() {
  //only run during cron between 8PM and midnight
  if (date('H') >= 20 && date('H') <= 24 ) {
    db_delete('flag_counts')
      ->condition('fid', array(3))
      ->execute();
    db_delete('flag_content')
      ->condition('fid', array(3))
      ->execute();
  }  
}